{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/ampliseq/master/nextflow_schema.json",
    "title": "nf-core/ampliseq pipeline parameters",
    "description": "Amplicon sequencing analysis workflow using DADA2 and QIIME2",
    "type": "object",
    "definitions": {
        "main_arguments": {
            "title": "Main arguments",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "Sequence input": {
                    "type": "string",
                    "mimetype": "text/tsv",
                    "fa_icon": "fas fa-dna",
                    "description": "Either a tab-separated sample sheet, a fasta file, or a folder containing zipped FastQ files",
                    "help_text": "Points to the main pipeline input, one of the following:\n- folder containing compressed fastq files\n- sample sheet ending with `.tsv` that points towards compressed fastq files\n- fasta file ending with `.fasta`, `.fna` or `.fa` that will be taxonomically classified\n\nRelated parameters are:\n- `--pacbio` and `--iontorrent` if the sequencing data is PacBio data or IonTorrent data (default expected: paired-end Illumina data)\n- `--single_end` if the sequencing data is single-ended Illumina data (default expected: paired-end Illumina data)\n- `--multiple_sequencing_runs` (folder input only) if the sequencing data originates from multiple sequencing runs\n- `--extension` (folder input only) if the sequencing file names do not follow the default (`\"/*_R{1,2}_001.fastq.gz\"`)\n- `--dada_ref_taxonomy`, `--qiime_ref_taxonomy`, and/or `--sintax_ref_taxonomy` to choose an appropriate reference taxonomy for the type of amplicon (16S/18S/ITS/CO1). If the `--sintax_ref_taxonomy` is given, taxonomic assignment is performed using the USEARCH sintax method in addition to DADA2 assignTaxonomy (default: DADA2 assignTaxonomy and 16S rRNA sequence database)\n\n##### Folder containing zipped FastQ files\n\nFor example:\n\n```bash\n--input 'path/to/data'\n```\n\nExample for input data organization from one sequencing run with two samples, paired-end data:\n\n```bash\ndata\n  \u251c\u2500sample1_1_L001_R1_001.fastq.gz\n  \u251c\u2500sample1_1_L001_R2_001.fastq.gz\n  \u251c\u2500sample2_1_L001_R1_001.fastq.gz\n  \u2514\u2500sample2_1_L001_R2_001.fastq.gz\n```\n\nPlease note the following requirements:\n\n1. The path must be enclosed in quotes\n2. The folder must contain gzip compressed demultiplexed fastq files. If the file names do not follow the default (`\"/*_R{1,2}_001.fastq.gz\"`), please check `--extension`.\n3. Sample identifiers are extracted from file names, i.e. the string before the first underscore `_`, these must be unique\n4. If your data is scattered, produce a sample sheet\n5. All sequencing data should originate from one sequencing run, because processing relies on run-specific error models that are unreliable when data from several sequencing runs are mixed. Sequencing data originating from multiple sequencing runs requires additionally the parameter `--multiple_sequencing_runs` and a specific folder structure.\n\n##### Sample sheet\n\nThe sample sheet file is an alternative way to provide input reads, it must be a tab-separated file ending with `.tsv` that must have two to four columns with the following headers: \n- `sampleID` (required): Unique sample identifiers, any unique string (may not contain dots `.`, must not start with a number)\n- `forwardReads` (required): Paths to (forward) reads zipped FastQ files\n- `reverseReads` (optional): Paths to reverse reads zipped FastQ files, required if the data is paired-end\n- `run` (optional): If the data was produced by multiple sequencing runs, any string\n\nFor example:\n\n```bash\n--input 'path/to/samplesheet.tsv'\n```\n\n##### Fasta file\n\nWhen pointing at a file ending with `.fasta`, `.fna` or `.fa`, the containing sequences will be taxonomically classified. All other pipeline steps will be skipped.\n\nThe sequence header line may contain a description, that will be kept as part of the sequence name. However, tabs will be changed into spaces.\n\nThe fasta file input option can be used to taxonomically classify previously produced ASV/OTU sequences.\n\nFor example:\n\n```bash\n--input 'path/to/amplicon_sequences.fasta'\n```"
                },
                "Truncation Length": {
                    "type": "integer",
                    "description": "Integer value of truncation length",
                    "help_text": "Enter value to truncate to",
                    "fa_icon": "fas fa-cut"
                },
                "Min Reads": {
                    "type": "integer",
                    "description": "Minimum number of reads to pass filter",
                    "fa_icon": "fas fa-hashtag"
                },
                "RefSeqs": {
                    "type": "string",
                    "description": "Qiime artifact for reference dna sequences",
                    "fa_icon": "fas fa-folder-open"
                },
                "RefTax": {
                    "type": "string",
                    "description": "Qiime artifact for reference taxonomy",
                    "fa_icon": "fas fa-folder-open"
                },
                "Max Accepts": {
                    "type": "integer",
                    "description": "Number of blast results to return",
                    "fa_icon": "fas fa-hashtag"
                }
            },
            "required": ["input"],
            "fa_icon": "fas fa-terminal"
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/main_arguments"
        }
    ]
}
